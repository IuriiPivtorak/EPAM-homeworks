#!/usr/bin/env python
"""
Weather forecast script with UI
"""

import os
import sys
import logging
from PyQt5.QtWidgets import QMainWindow, QApplication, QPushButton, QLineEdit, QMessageBox
from PyQt5.QtCore import pyqtSlot

from supertool.weather import nominatim_weather


class App(QMainWindow):
    """
    Class for application.

    """
    def __init__(self):
        super().__init__()
        self.title = 'Input location and token id divided by ", "'
        self.left = 400
        self.top = 400
        self.width = 400
        self.height = 140
        self.initUI()

    def initUI(self):
        """
        Textbox creation method

        :returns: None -- shows textbox.
        """
        self.setWindowTitle(self.title)
        self.setGeometry(self.left, self.top, self.width, self.height)

        self.textbox = QLineEdit(self)
        self.textbox.move(20, 20)
        self.textbox.resize(280, 40)

        self.button = QPushButton('Make forecast', self)
        self.button.move(20, 80)

        self.button.clicked.connect(self.on_click)
        self.show()

    @pyqtSlot()
    def on_click(self):
        """
        Sets operations when ok button is clicked.

        :returns: None -- shows result of operation.
        """
        try:
            info = self.textbox.text()
            inputs = [str(s) for s in info.split(', ')]
            location = inputs[0]
            token_id = inputs[1]
            print(inputs)
            sys.stdout = open('results.txt', 'w')
            nominatim_weather(str(location), str(token_id))
            sys.stdout = sys.__stdout__
            with open('results.txt') as file:
                lines = file.readlines()
                result = ''
                for line in lines:
                    result += str(line)
                QMessageBox.question(self, 'Weather forecast', result, QMessageBox.Ok,
                                     QMessageBox.Ok)
                self.textbox.setText('')
        finally:
            os.remove('results.txt')


if __name__ == '__main__':

    ROOT_LOGGER = logging.getLogger()

    try:
        app = QApplication(sys.argv)
        ex = App()
        sys.exit(app.exec_())
    except Exception as err:
        log_level = logging.ERROR
        hdlr = logging.FileHandler('log.txt')
        formatter = logging.Formatter('%(asctime)s %(levelname)s %(message)s')
        hdlr.setFormatter(formatter)
        ROOT_LOGGER.addHandler(hdlr)
        ROOT_LOGGER.setLevel(log_level)
        ROOT_LOGGER.critical(err)